I want to do speech sentiment classification and Modify Word2VecSentimentRNN .

Firstly, I use a util class from sphinx4 to convert a wave file to a mfcc, which contains 39 features.
The key function next(int num) of my DataSetIterator is as follow:

   private DataSet nextDataSet(int num) throws IOException {
        List<List<float[]>> mfccList = new ArrayList<List<float[]>>(num);
        int numberOfLabels = this.getLabels().size();
        int [] mood = new int[num];
        for( int i=0; i<num && cursor<totalExamples(); i++ ){
            if(cursor % numberOfLabels == 0){
                int index = cursor / numberOfLabels;
                List<float[]> mfcc = featureFileDumper.mfccList(this.angryFiles.get(index).getAbsolutePath());
                mood[i] = 0;
                mfccList.add(mfcc);
            } else if(cursor % numberOfLabels == 1){
            	int index = cursor / numberOfLabels;
                List<float[]> mfcc = featureFileDumper.mfccList(this.fearFiles.get(index).getAbsolutePath());
                mood[i] = 1;
                mfccList.add(mfcc);
            }else if(cursor % numberOfLabels == 2){
            	int index = cursor / numberOfLabels;
            	List<float[]> mfcc = featureFileDumper.mfccList(this.happyFiles.get(index).getAbsolutePath());
                mood[i] = 2;
                mfccList.add(mfcc);
            }else if(cursor % numberOfLabels == 3){
            	int index = cursor / numberOfLabels;
                List<float[]> mfcc = featureFileDumper.mfccList(this.neutralFiles.get(index).getAbsolutePath());
                mood[i] = 3;
                mfccList.add(mfcc);
            }else if(cursor % numberOfLabels == 4){
            	int index = cursor / numberOfLabels;
                List<float[]> mfcc = featureFileDumper.mfccList(this.sadFiles.get(index).getAbsolutePath());
                mood[i] = 4;
                mfccList.add(mfcc);
            }
            else if(cursor % numberOfLabels == 5){
            	int index = cursor / numberOfLabels;
                List<float[]> mfcc = featureFileDumper.mfccList(this.surpriseFiles.get(index).getAbsolutePath());
                mood[i] = 5;
                mfccList.add(mfcc);
            }
            cursor++;
        }
        int maxFrames=0;
        for(List<float[]> l : mfccList)
        {
        	maxFrames = Math.max(maxFrames, l.size());
        }
        
        maxLength = maxFrames;//暂时不限制frame数
        INDArray features = Nd4j.create(mfccList.size(), this.vectorSize, maxLength);
        INDArray labels = Nd4j.create(mfccList.size(), numberOfLabels, maxLength); 
        INDArray featuresMask = Nd4j.zeros(mfccList.size(), maxLength);
        INDArray labelsMask = Nd4j.zeros(mfccList.size(), maxLength);

        int[] temp = new int[2];
        for( int i=0; i<mfccList.size(); i++ ){
            temp[0] = i;
            List<float[]> mfccs = mfccList.get(i);
            for( int j=0; j<mfccs.size() && j<maxLength; j++ ){
            	float [] data = mfccs.get(j);
            	INDArray mfcc = Nd4j.create(data);
                features.put(new INDArrayIndex[]{NDArrayIndex.point(i), NDArrayIndex.all(), NDArrayIndex.point(j)}, mfcc);

                temp[1] = j;
                featuresMask.putScalar(temp, 1.0); 
            }

            int idx = mood[i];
            int lastIdx = Math.min(mfccs.size(),maxLength);
            labels.putScalar(new int[]{i,idx,lastIdx-1},1.0); 
            labelsMask.putScalar(new int[]{i,lastIdx-1},1.0); 
        }

        return new DataSet(features,labels,featuresMask,labelsMask);
    }
    
    And the RNN configuration is as follow :
    
        int batchSize = 30;     //Number of examples in each minibatch
        int vectorSize = 39; //cmusphinx mfcc 39
        int nEpochs = 10;        //Number of epochs (full passes of training data) to train on
        int truncateToLength = 400;  
        int trainFileCount=150;
        //Set up network configuration
        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
                .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1)
                .updater(Updater.ADADELTA)
                .regularization(true).l2(1e-5)
                .weightInit(WeightInit.XAVIER)
                .gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue).gradientNormalizationThreshold(1.0)
                .learningRate(0.0018)//0.0018
                .list()
                .layer(0, new GravesLSTM.Builder().nIn(vectorSize).nOut(100)
                        .activation("relu").build())//softsign
                .layer(1, new RnnOutputLayer.Builder().activation("softmax")
                        .lossFunction(LossFunctions.LossFunction.MCXENT).nIn(100).nOut(6).build())
                .pretrain(false).backprop(true).build();

        MultiLayerNetwork net = new MultiLayerNetwork(conf);
        net.init();
        //net.setListeners(new ScoreIterationListener(1));
        net.setListeners(new HistogramIterationListener(1));
        //net.setListeners(new FlowIterationListener(1));
        Map<String,List<File>> list = AudioDataSetProcessor.audioCorpusToList(DATA_PATH);
        DataSetIterator train = new AsyncDataSetIterator(new ChineseAudioDataSetIterator(list,DATA_PATH,batchSize,vectorSize,trainFileCount,true),1);
        DataSetIterator test = new AsyncDataSetIterator(new ChineseAudioDataSetIterator(list,DATA_PATH,batchSize,vectorSize,trainFileCount,false),1);
       
        System.out.println("Starting training");
        for( int i=0; i<nEpochs; i++ ){
            net.fit(train);
            train.reset();
            System.out.println("Epoch " + i + " complete. Starting evaluation:");

            Evaluation evaluation = new Evaluation();
            while(test.hasNext()){
                DataSet t = test.next();
                INDArray features = t.getFeatureMatrix();
                INDArray lables = t.getLabels();
                INDArray inMask = t.getFeaturesMaskArray();
                INDArray outMask = t.getLabelsMaskArray();
                INDArray predicted = net.output(features,false,inMask,outMask);

                evaluation.evalTimeSeries(lables,predicted,outMask);
            }
            test.reset();

            System.out.println(evaluation.stats());
        }
        
        
        
        My questions are :
        1. Is my thinking right?
        2. I have only 1200 training examples in total, the precision of my training is below 0.4, so how to improve my program to have a better pricision ?
        
    
